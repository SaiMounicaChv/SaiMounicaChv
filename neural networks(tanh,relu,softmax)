# -*- coding: utf-8 -*-
"""Question2(ii).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ps8wfCPOR2c_AYy_Y-idCwFHNCsakqlr
"""

from numpy import loadtxt
import numpy as np
from keras.models import Sequential
from keras.datasets import fashion_mnist
import tensorflow as tf

#importing the fashion MNISt data directly from library 
input_data=fashion_mnist.load_data()
input_data

#importing test flow tf to directly divide the data into test and train as it is in the library 

import tensorflow as tf

#directly dividing the data into test and train set from library data set
  
(image_train, p_train), (image_test, p_test) = tf.keras.datasets.fashion_mnist.load_data()
image_train.shape

p_train.shape
validation_data=(image_test, p_test)
validation_data
image_test
image_test.shape
p_test
image_train.shape

#reshapping the data to perform normalization

image_train = image_train.reshape(-1, 28*28)
image_train
image_test = image_test.reshape(-1, 28*28)
image_test

#normalizing the data 
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit_transform(image_train).reshape(-1,1)
scaler.transform(image_test)

#relu function
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=500, activation='relu', input_shape=(784, )))
model.add(tf.keras.layers.Dense(units=10, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])

model.fit(image_train, p_train, epochs=150)
fashion_test_loss, F1_score = model.evaluate(image_test, p_test)

print(F1_score)
print(fashion_test_loss)

#tanh 
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=500, activation='tanh', input_shape=(784, )))
model.add(tf.keras.layers.Dense(units=10, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])

model.fit(image_train, p_train, epochs=150)
fashion_test_loss, F1_score = model.evaluate(image_test, p_test)

print(F1_score)
print(fashion_test_loss)

#sigmoid
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=500, activation='sigmoid', input_shape=(784, )))
model.add(tf.keras.layers.Dense(units=10, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])

model.fit(image_train, p_train, epochs=150)
fashion_test_loss, F1_score = model.evaluate(image_test, p_test)

print(F1_score)
print(fashion_test_loss)

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=500, activation='softmax', input_shape=(784, )))
model.add(tf.keras.layers.Dense(units=10, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])

model.fit(image_train, p_train, epochs=150)
fashion_test_loss, F1_score = model.evaluate(image_test, p_test)

print(F1_score)
print(fashion_test_loss)